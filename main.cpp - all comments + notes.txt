#include <iostream>

#define GLEW_STATIC
#include <glew.h>
#include <glfw3.h>
#include <glm/mat4x4.hpp>
#include <glm/vec3.hpp>
#include <glm/gtx/transform.hpp>
#include <math.h>
#include <time.h>
#include <thread>
#include <chrono>

#include "Triangle_Mesh.h"
#include "Square_Mesh.h"
#include "Hexagon_Mesh.h"
#include "Expectations.h"
#include "Shader.h"
#include "Colored_2D_Shader_Program.h"
#include "textured_2D_shader_program.h"
#include "Colored_3D_Shader_Program.h"
#include "Textured_3D_Shader_Program.h"
#include "texture.h"
#include "Cube_Mesh.h"
#include "Hexagonal_Pyramid_Mesh.h"
#include "Cheese_Wedge_Mesh.h"

#define SCREEN_WIDTH 1500.0f
#define SCREEN_HEIGHT 1000.0f

enum Key_State
{
	RELEASED,
	PRESSED,
	HELD
};
Key_State escape_key_state = Key_State::RELEASED;
Key_State space_key_state = Key_State::RELEASED;
Key_State w_key_state = Key_State::RELEASED;
Key_State a_key_state = Key_State::RELEASED;
Key_State s_key_state = Key_State::RELEASED;
Key_State d_key_state = Key_State::RELEASED;

// OpenGL error calls this function
void gl_debug_message_callback(GLenum, GLenum type, GLuint, GLenum severity,
	GLsizei, const GLchar * message, const void*)
{
	if (severity > GL_DEBUG_SEVERITY_NOTIFICATION)
	{
		fprintf(stderr, "GL_CALBACK: %S type = 0x%x, severity = 0x%x, message = %s\n",
			(type == GL_DEBUG_TYPE_ERROR ? "** GL ERROR **" : ""),
			type, severity, message);
		std::cout << glGetError() << std::endl;
	}
}

// Called on input
void on_input(GLFWwindow*, int key, int, int action, int)
{
	switch (action)
	{
		case GLFW_PRESS:
			switch (key)
			{
			case GLFW_KEY_ESCAPE:
				escape_key_state = Key_State::PRESSED;
				break;
			case GLFW_KEY_SPACE:
				space_key_state = Key_State::PRESSED;
				break;
			case GLFW_KEY_W:
				w_key_state = Key_State::PRESSED;
				break;
			case GLFW_KEY_A:
				a_key_state = Key_State::PRESSED;
				break;
			case GLFW_KEY_S:
				s_key_state = Key_State::PRESSED;
				break;
			case GLFW_KEY_D:
				d_key_state = Key_State::PRESSED;
				break;
			}
			break;

		case GLFW_RELEASE:
			switch (key)
			{
			case GLFW_KEY_ESCAPE:
				escape_key_state = Key_State::RELEASED;
				break;
			case GLFW_KEY_SPACE:
				space_key_state = Key_State::RELEASED;
				break;
			case GLFW_KEY_W:
				w_key_state = Key_State::RELEASED;
				break;
			case GLFW_KEY_A:
				a_key_state = Key_State::RELEASED;
				break;
			case GLFW_KEY_S:
				s_key_state = Key_State::RELEASED;
				break;
			case GLFW_KEY_D:
				d_key_state = Key_State::RELEASED;
				break;
			}
			break;
	};
}

double mouse_x_position = 0.0f;
double mouse_y_position = 0.0f;
double previous_mouse_x_position = 0.0f;
double previous_mouse_y_position = 0.0f;
int inputs_captured = 0;
void cursor_postion_callback(GLFWwindow* window, double xpos, double ypos)
{
	previous_mouse_x_position = mouse_x_position;
	previous_mouse_y_position = mouse_y_position;
	mouse_x_position = xpos;
	mouse_y_position = ypos;
	inputs_captured += 1;
}

int main(void)
{
	expect(glfwInit() == GLFW_TRUE, "Failed to initialize GLFW");

	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
	glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);

	GLFWwindow* window = glfwCreateWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "ICG202 - Hexagon Render", NULL, NULL);
	expect(window != nullptr, "Failed to create GLFW window!");
	glfwMakeContextCurrent(window);

	glewExperimental = GL_TRUE;
	const GLenum init_result = glewInit();
	expect(glewInit() == GLEW_OK, (char*)glewGetErrorString(init_result));

	glEnable(GL_DEBUG_OUTPUT);
	glDebugMessageCallback(gl_debug_message_callback, 0);

	glEnable(GL_DEPTH_TEST);
	glDepthMask(GL_TRUE);
	glDepthFunc(GL_LESS);

	glEnable(GL_CULL_FACE);
	glCullFace(GL_BACK);
	glFrontFace(GL_CCW);

	glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);
	glfwSetKeyCallback(window, on_input);
	glfwSetCursorPosCallback(window, cursor_postion_callback);

	// CPU CODE: C++ -- VS Compiles -- > -- Windows run via CPU
	// CPU CODE: GLSL -- OpenGL Compiles -- > -- OpenGL run via GPU

	//Square_Mesh* square = new Square_Mesh(); // Square to be filled with colour or texture
	//Shader* vertex_shader = new Shader("Shaders/textured.2D.vertex_shader.glsl", Shader::Type::Vertex);
	//Shader* fragment_shader = new Shader("Shaders/textured.2D.fragment_shader.glsl", Shader::Type::Fragment);
	//Textured_2D_Shader_Program* program = new Textured_2D_Shader_Program(vertex_shader, fragment_shader);
	//Texture* texture = new Texture("Assets/sprite.airplane.png");
	//Texture* mask = new Texture("Assets/mask.airplane_background.png");

	// Colours for each vertex
	//std::vector<GLfloat> colors =
	//{
	//	// Front Face - Red
	//	// triangle 1
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	// triangle 2
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,

	//	// Back Face - Blue-Green	 
	//	// triangle 1
	//	0.0f, 0.5f, 0.5f, 1.0f,
	//	0.0f, 0.5f, 0.5f, 1.0f,
	//	0.0f, 0.5f, 0.5f, 1.0f,
	//	// triangle 2
	//	0.0f, 0.5f, 0.5f, 1.0f,
	//	0.0f, 0.5f, 0.5f, 1.0f,
	//	0.0f, 0.5f, 0.5f, 1.0f,

	//	// Bottom Face - Purple
	//	// triangle 1
	//	0.120f, 0.13f, 0.200f, 1.0f,
	//	0.120f, 0.13f, 0.200f, 1.0f,
	//	0.120f, 0.13f, 0.200f, 1.0f,
	//	// triangle 2
	//	0.120f, 0.13f, 0.200f, 1.0f,
	//	0.120f, 0.13f, 0.200f, 1.0f,
	//	0.120f, 0.13f, 0.200f, 1.0f,

	//	// Top Face - Yellow
	//	// triangle 1
	//	1.0f, 1.0f, 0.0f, 1.0f,
	//	1.0f, 1.0f, 0.0f, 1.0f,
	//	1.0f, 1.0f, 0.0f, 1.0f,
	//	// triangle 2
	//	1.0f, 1.0f, 0.0f, 1.0f,
	//	1.0f, 1.0f, 0.0f, 1.0f,
	//	1.0f, 1.0f, 0.0f, 1.0f,

	//	// Left Face - Blue
	//	// triangle 1
	//	0.0f, 0.0f, 1.0f, 1.0f,
	//	0.0f, 0.0f, 1.0f, 1.0f,
	//	0.0f, 0.0f, 1.0f, 1.0f,
	//	// triange 2
	//	0.0f, 0.0f, 1.0f, 1.0f,
	//	0.0f, 0.0f, 1.0f, 1.0f,
	//	0.0f, 0.0f, 1.0f, 1.0f,

	//	// Right Face - Brown
	//	// triangle 1
	//	0.5f, 0.2f, 0.0f, 1.0f,
	//	0.5f, 0.2f, 0.0f, 1.0f,
	//	0.5f, 0.2f, 0.0f, 1.0f,
	//	// triange 2  
	//	0.5f, 0.2f, 0.0f, 1.0f,
	//	0.5f, 0.2f, 0.0f, 1.0f,
	//	0.5f, 0.2f, 0.0f, 1.0f,

	//};
	//std::vector<GLfloat> hexagon_colors =
	//{
	//	// HEXAGON BASE COLORS
	//	// triangle 1
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	// triangle 2
	//	1.0f, 0.9f, 0.200f, 1.0f,
	//	1.0f, 0.9f, 0.200f, 1.0f,
	//	1.0f, 0.9f, 0.200f, 1.0f,
	//	// triangle 3
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	// triangle 4
	//	1.0f, 0.9f, 0.200f, 1.0f,
	//	1.0f, 0.9f, 0.200f, 1.0f,
	//	1.0f, 0.9f, 0.200f, 1.0f,
	//	// triangle 5
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	// triangle 6
	//	1.0f, 0.9f, 0.200f, 1.0f,
	//	1.0f, 0.9f, 0.200f, 1.0f,
	//	1.0f, 0.9f, 0.200f, 1.0f,
	//};
	//std::vector<GLfloat> hexagonal_pyramid_colors =
	//{
	//	// HEXAGON BASE COLORS
	//	// triangle 1
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	// triangle 2
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	// triangle 3
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	// triangle 4
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	// triangle 5
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	// triangle 6
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,
	//	1.0f, 0.0f, 0.0f, 1.0f,

	//	// TRIANGULAR SIDE FACE COLORS
	//	// Triangle Face 1
	//	0.0f, 0.0f, 0.5f, 1.0f,
	//	1.0f, 1.0f, 1.0f, 1.0f,
	//	0.0f, 0.0f, 0.1f, 1.0f,
	//	// Triangle Face 2
	//	0.0f, 0.0f, 0.5f, 1.0f,
	//	1.0f, 1.0f, 1.0f, 1.0f,
	//	0.0f, 0.0f, 0.1f, 1.0f,
	//	// Triangle Face 3
	//	0.0f, 0.0f, 0.5f, 1.0f,
	//	1.0f, 1.0f, 1.0f, 1.0f,
	//	0.0f, 0.0f, 0.1f, 1.0f,
	//	// Triangle Face 4
	//	0.0f, 0.0f, 0.5f, 1.0f,
	//	1.0f, 1.0f, 1.0f, 1.0f,
	//	0.0f, 0.0f, 0.1f, 1.0f,
	//	// Triangle Face 5
	//	0.0f, 0.0f, 0.5f, 1.0f,
	//	1.0f, 1.0f, 1.0f, 1.0f,
	//	0.0f, 0.0f, 0.1f, 1.0f,
	//	// Triangle Face 6
	//	0.0f, 0.0f, 0.5f, 1.0f,
	//	1.0f, 1.0f, 1.0f, 1.0f,
	//	0.0f, 0.0f, 0.1f, 1.0f,
	//};

	/*
	Cube_Mesh* cube = new Cube_Mesh();
	Shader* vertex_shader = new Shader("Shaders/colored.3D.vertex_shader.glsl", Shader::Type::Vertex);
	Shader* fragment_shader = new Shader("Shaders/colored.3D.fragment_shader.glsl", Shader::Type::Fragment);
	Colored_3D_Shader_Program* program = new Colored_3D_Shader_Program(vertex_shader, fragment_shader);
	*/
	/*Hexagon_Mesh* hexagon = new Hexagon_Mesh();
	Shader* hexagon_vertex_shader = new Shader("Shaders/colored.3D.vertex_shader.glsl", Shader::Type::Vertex);
	Shader* hexagon_fragment_shader = new Shader("Shaders/colored.3D.fragment_shader.glsl", Shader::Type::Fragment);
	Colored_3D_Shader_Program* hexagon_program = new Colored_3D_Shader_Program(hexagon_vertex_shader, hexagon_fragment_shader);*/

	Hexagonal_Pyramid_Mesh* hexagonal_pyramid_mesh = new Hexagonal_Pyramid_Mesh();
	Shader* pyramid_vertex_shader = new Shader("Shaders/textured.3D.vertex_shader.glsl", Shader::Type::Vertex);
	Shader* pyramid_fragment_shader = new Shader("Shaders/textured.3D.fragment_shader.glsl", Shader::Type::Fragment);
	Textured_3D_Shader_Program* pyramid_scheme = new Textured_3D_Shader_Program(pyramid_vertex_shader, pyramid_fragment_shader);
	Texture* hexagonal_pyramid_texture = new Texture("Assets/moon.base.jpg");

	Cheese_Wedge_Mesh* cheese_wedge_mesh = new Cheese_Wedge_Mesh();
	Shader* wedge_vertex_shader = new Shader("Shaders/textured.3D.vertex_shader.glsl", Shader::Type::Vertex);
	Shader* wedge_fragment_shader = new Shader("Shaders/textured.3D.fragment_shader.glsl", Shader::Type::Fragment);
	Textured_3D_Shader_Program* rat_bait = new Textured_3D_Shader_Program(wedge_vertex_shader, wedge_fragment_shader);
	Texture* wedge_texture = new Texture("Assets/texture.cheese.jpg");

	//Cube_Mesh* cube = new Cube_Mesh();
	//Shader* vertex_shader = new Shader("Shaders/textured.3D.vertex_shader.glsl", Shader::Type::Vertex);
	//Shader* fragment_shader = new Shader("Shaders/textured.3D.fragment_shader.glsl", Shader::Type::Fragment);
	//Textured_3D_Shader_Program* program = new Textured_3D_Shader_Program(vertex_shader, fragment_shader);
	//Texture* cube_texture = new Texture("Assets/ice.sheet.jpg");

	// Re-use a mesh over and over
	// Transform a mesh using the GPU
	// CPU - floats, integers
	// GPU - matrix multiplication usin thousands of cores.

	float a = 0.0f;
	float b = 0.0f;
	float c = 0.0f;
	float d = 0.0f;
	float sz = 0.0f;

	glm::vec3 camera_position = glm::vec3(0.0f, 0.0f, 1.0f);
	glm::vec3 camera_target = glm::vec3(0.0f, 0.0f, 0.0f);
	glm::vec3 camera_up = glm::vec3(0.0f, 1.0f, 0.0f);

	float yaw = -90.0f; // x
	float roll = 0.0f; // y
	float pitch = 0.0f; // z
	bool first_frame = true;

	// Set up aspect ratio params:
	float aspect_ratio = SCREEN_WIDTH / SCREEN_HEIGHT; // 1.5
	float default_world_size = 10.0f;
	float y_units = default_world_size;   // 2
	float x_units = aspect_ratio * y_units;    // 3
	float z_units = default_world_size;

	glm::mat4 projection;

	glm::mat4 ortho = glm::ortho(-x_units / 2, x_units / 2,
		-y_units / 2, y_units / 2,
		-1000.0f, 1000.0f);

	glm::mat4 perspective = glm::perspectiveFov(
		glm::radians(90.0f),
		SCREEN_WIDTH,
		SCREEN_HEIGHT,
		0.1f,
		-1000.0f);

	projection = ortho;

	bool should_stop_rendering = false;
	bool camera_change = false;
	while (should_stop_rendering == false)
	{
		if (escape_key_state == Key_State::PRESSED)
			escape_key_state = Key_State::HELD;
		if (space_key_state == Key_State::PRESSED)
			space_key_state = Key_State::HELD;
		if (w_key_state == Key_State::PRESSED)
			w_key_state = Key_State::HELD;
		if (a_key_state == Key_State::PRESSED)
			a_key_state = Key_State::HELD;
		if (s_key_state == Key_State::PRESSED)
			s_key_state = Key_State::HELD;
		if (d_key_state == Key_State::PRESSED)
			d_key_state = Key_State::HELD;

		//bool move_object_upwards =
		//	w_key_state == Key_State::PRESSED ||
		//	w_key_state == Key_State::HELD;
		//bool move_object_downwards =
		//	s_key_state == Key_State::PRESSED ||
		//	s_key_state == Key_State::HELD;
		//bool move_object_right =
		//	a_key_state == Key_State::PRESSED ||
		//	a_key_state == Key_State::HELD;
		//bool move_object_left =
		//	d_key_state == Key_State::PRESSED ||
		//	d_key_state == Key_State::HELD;

		///* Manual aspect ratio matrix :
		//glm::mat4 aspect_scaling = glm::scale(
		//	glm::mat4(1.0),
		//	glm::vec3(2.0f / x_units, 2.0f / y_units, 2.0f / z_units)  // 0.666*
		//);*/

		//	if (move_object_upwards)
		//	{
		//		camera_position.y -= 0.4f;
		//	}
		//	if (move_object_downwards)
		//	{
		//		camera_position.y += 0.4f;
		//	}
		//	if (move_object_left)
		//	{
		//		camera_position.x -= 0.4f;
		//	}
		//	if (move_object_right)
		//	{
		//		camera_position.x += 0.4f;
		//	}



		glm::vec2 mouse_translation = glm::vec2(mouse_x_position - previous_mouse_x_position, mouse_y_position - previous_mouse_y_position);
		previous_mouse_x_position = mouse_x_position;
		previous_mouse_y_position = mouse_y_position;

		float sensitivity = 0.1f;
		mouse_translation.x *= sensitivity;
		mouse_translation.y *= sensitivity;

		yaw += mouse_translation.x;
		pitch -= mouse_translation.y;

		if (pitch > 89.0f)
			pitch = 89.0f;
		if (pitch < -89.0f)
			pitch = -89.0f;

		glm::vec3 camera_forward = glm::normalize(camera_target - camera_position);
		bool hasnt_moved_cursor_yet = (previous_mouse_x_position == 0.0f && previous_mouse_y_position == 0.0f);
		if (inputs_captured > 4)
		{
			glm::vec3 direction;
			direction.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));
			direction.y = sin(glm::radians(pitch));
			direction.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));
			camera_forward += glm::normalize(direction);
		}

		glm::vec3 camera_up = glm::vec3(0.0f, 1.0f, 0.0f);

		glm::vec3 camera_left = glm::normalize(glm::cross(camera_up, camera_forward));

		if (camera_change)
		{
			if (projection == ortho)
			{
				projection = perspective;
				camera_change = false;
			}
			else if (projection == perspective)
			{
				projection = ortho;
				camera_change = false;
			}
		}

		bool move_camera_forwards =
			w_key_state == Key_State::PRESSED ||
			w_key_state == Key_State::HELD;
		if (move_camera_forwards)
		{
			camera_position += camera_forward * 0.1f;
			camera_target += camera_forward * 0.1f;
		}
		bool move_camera_backwards =
			s_key_state == Key_State::PRESSED ||
			s_key_state == Key_State::HELD;
		if (move_camera_backwards)
		{
			camera_position -= camera_forward * 0.1f;
			camera_target -= camera_forward * 0.1f;
		}
		bool move_camera_right =
			d_key_state == Key_State::PRESSED ||
			d_key_state == Key_State::HELD;
		if (move_camera_right)
		{
			camera_position -= camera_left * 0.1f;
			camera_target -= camera_left * 0.1f;
		}
		bool move_camera_left =
			a_key_state == Key_State::PRESSED ||
			a_key_state == Key_State::HELD;
		if (move_camera_left)
		{
			camera_position += camera_left * 0.1f;
			camera_target += camera_left * 0.1f;
		}


		std::cout << camera_position.z << std::endl;

		glm::mat4 camera;
		camera = glm::lookAt(camera_position, camera_position + camera_forward, camera_up);

		//glm::mat4 camera_translation_m = glm::translate(glm::mat4(1.0f), camera_position);
		//glm::mat4 camera = camera_translation_m;

		{
			glm::vec3 translation = glm::vec3(0.0f, 0.0f, -1.0f);
			glm::vec3 rotation = glm::vec3(0.0f, 0.0f, 0.0f);
			glm::vec3 scale = glm::vec3(3.0f, 3.0f, 3.0f);


			glm::mat4 translation_m = glm::translate(glm::mat4(1.0f), translation);
			glm::mat4 scale_m = glm::scale(glm::mat4(1.0f), scale);

			glm::mat4 rotation_x = glm::rotate(rotation.x, glm::vec3(1.0f, 0.0f, 0.0f));
			glm::mat4 rotation_y = glm::rotate(rotation.y, glm::vec3(0.0f, 1.0f, 0.0f));
			glm::mat4 rotation_z = glm::rotate(rotation.z, glm::vec3(0.0f, 0.0f, 1.0f));
			glm::mat4 rotation_m = rotation_x * rotation_y * rotation_z;

			glm::mat4 model = translation_m * rotation_m * scale_m;
			glm::mat4 final_transformation = projection * camera * model;
			pyramid_scheme->render(hexagonal_pyramid_mesh, hexagonal_pyramid_texture, &final_transformation);
		}
		/* {
			glm::vec3 translation = glm::vec3(2.0f, 0.0f, -3.0f);
			glm::vec3 rotation = glm::vec3(0.0f, 0.0f, 0.0f);
			glm::vec3 scale = glm::vec3(3.0f, 3.0f, 3.0f);


			glm::mat4 translation_m = glm::translate(glm::mat4(1.0f), translation);
			glm::mat4 scale_m = glm::scale(glm::mat4(1.0f), scale);

			glm::mat4 rotation_x = glm::rotate(rotation.x, glm::vec3(1.0f, 0.0f, 0.0f));
			glm::mat4 rotation_y = glm::rotate(rotation.y, glm::vec3(0.0f, 1.0f, 0.0f));
			glm::mat4 rotation_z = glm::rotate(rotation.z, glm::vec3(0.0f, 0.0f, 1.0f));
			glm::mat4 rotation_m = rotation_x * rotation_y * rotation_z;

			glm::mat4 model = translation_m * rotation_m * scale_m;
			glm::mat4 final_transform = projection * camera * model;
			rat_bait->render(cheese_wedge_mesh, wedge_texture, &final_transform);
		}*/

		// This renders the objects to the scene
		glfwSwapBuffers(window);
		glClearColor(0.0f, 0.05f, 0.1f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		glBindVertexArray(0);
		glUseProgram(0);
		a += 0.5f;
		b += 0.05f;
		c += 0.0002f;
		d += 0.004f;

		glfwPollEvents();

		if (escape_key_state == Key_State::PRESSED)
			should_stop_rendering = true;
		if (space_key_state == Key_State::PRESSED)
			camera_change = true;
		std::this_thread::sleep_for(std::chrono::milliseconds(30));
	}
}